From 8f2ad3f7498cb88ac8c00f1efebb4285ee3d63d7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20M=C3=BCller?= <schnitzeltony@googlemail.com>
Date: Thu, 3 Apr 2014 10:48:11 +0200
Subject: [PATCH] board-overo.c: make wifi work
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

some information based on later commit:

commit 94647a30124e2c7243ffcd780862ed591ae36450
Author: Florian Vaussard <florian.vaussard@epfl.ch>
Date:   Fri Mar 7 20:22:14 2014 +0100

    ARM: dts: omap3-overo: Enable WiFi/BT combo

    MMC2 is used by the on-board WiFi module populated on some boards
    (based on Marvell Libertas 8688 SDIO). The Bluetooth is connected
    to UART2.

    Signed-off-by: Florian Vaussard <florian.vaussard@epfl.ch>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

Signed-off-by: Andreas MÃ¼ller <schnitzeltony@googlemail.com>
---
 arch/arm/mach-omap2/board-overo.c | 76 +++++++++++++++++++++++++++++++++------
 1 file changed, 65 insertions(+), 11 deletions(-)

diff --git a/arch/arm/mach-omap2/board-overo.c b/arch/arm/mach-omap2/board-overo.c
index 2002f20..d8998fb 100644
--- a/arch/arm/mach-omap2/board-overo.c
+++ b/arch/arm/mach-omap2/board-overo.c
@@ -67,6 +67,7 @@
 
 #define OVERO_GPIO_BT_XGATE	15
 #define OVERO_GPIO_W2W_NRESET	16
+#define OVERO_GPIO_W2W_POWERON	54
 #define OVERO_GPIO_PENDOWN	114
 #define OVERO_GPIO_BT_NRESET	164
 #define OVERO_GPIO_USBH_CPEN	168
@@ -395,6 +396,65 @@ static struct regulator_consumer_supply overo_vmmc1_supply[] = {
 	REGULATOR_SUPPLY("vmmc", "omap_hsmmc.0"),
 };
 
+/* WIFI */
+static struct regulator_consumer_supply overo_vmmc2_supply[] = {
+	REGULATOR_SUPPLY("vmmc", "omap_hsmmc.1"),
+};
+
+static struct regulator_consumer_supply overo_vmmc2_vaux_supply[] = {
+	REGULATOR_SUPPLY("vmmc_aux", "omap_hsmmc.1"),
+};
+
+static struct regulator_init_data vwifi_regulator = {
+	.constraints = {
+		.valid_ops_mask		= REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(overo_vmmc2_supply),
+	.consumer_supplies	= overo_vmmc2_supply,
+};
+
+static struct regulator_init_data vwifiaux_regulator = {
+	.constraints = {
+		.valid_ops_mask		= REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(overo_vmmc2_vaux_supply),
+	.consumer_supplies	= overo_vmmc2_vaux_supply,
+};
+
+static struct fixed_voltage_config vwifi = {
+	.supply_name		= "vwifi",
+	.microvolts		= 3300000, /* 3.3V */
+	.gpio			= OVERO_GPIO_W2W_POWERON,
+	.startup_delay		= 0,
+	.enable_high = 1,
+	.init_data		= &vwifi_regulator,
+};
+
+static struct fixed_voltage_config vwifiaux = {
+	.supply_name		= "vwifiaux",
+	.microvolts		= 3300000, /* 3.3V */
+	.gpio			= OVERO_GPIO_W2W_NRESET,
+	.startup_delay		= 10000,
+	.enable_high = 1,
+	.init_data		= &vwifiaux_regulator,
+};
+
+static struct platform_device vwifi_device = {
+	.name		= "reg-fixed-voltage",
+	.id		= 2,
+	.dev = {
+		.platform_data = &vwifi,
+	},
+};
+
+static struct platform_device vwifiaux_device = {
+	.name		= "reg-fixed-voltage",
+	.id		= 3,
+	.dev = {
+		.platform_data = &vwifiaux,
+	},
+};
+
 #if defined(CONFIG_LEDS_GPIO) || defined(CONFIG_LEDS_GPIO_MODULE)
 #include <linux/leds.h>
 
@@ -591,6 +650,12 @@ static void __init overo_init(void)
 	regulator_register_fixed(0, dummy_supplies, ARRAY_SIZE(dummy_supplies));
 	omap3_mux_init(board_mux, OMAP_PACKAGE_CBB);
 	overo_i2c_init();
+	ret = platform_device_register(&vwifi_device);
+	if (ret)
+		pr_err("error registering vwifi_device device: %d\n", ret);
+	ret = platform_device_register(&vwifiaux_device);
+	if (ret)
+		pr_err("error registering vwifiaux_device device: %d\n", ret);
 	omap_hsmmc_init(mmc);
 	omap_display_init(&overo_dss_data);
 	omap_serial_init();
@@ -613,17 +678,6 @@ static void __init overo_init(void)
 	omap_mux_init_signal("sdrc_cke0", OMAP_PIN_OUTPUT);
 	omap_mux_init_signal("sdrc_cke1", OMAP_PIN_OUTPUT);
 
-	ret = gpio_request_one(OVERO_GPIO_W2W_NRESET, GPIOF_OUT_INIT_HIGH,
-			       "OVERO_GPIO_W2W_NRESET");
-	if (ret == 0) {
-		gpio_export(OVERO_GPIO_W2W_NRESET, 0);
-		gpio_set_value(OVERO_GPIO_W2W_NRESET, 0);
-		udelay(10);
-		gpio_set_value(OVERO_GPIO_W2W_NRESET, 1);
-	} else {
-		pr_err("could not obtain gpio for OVERO_GPIO_W2W_NRESET\n");
-	}
-
 	ret = gpio_request_array(overo_bt_gpios, ARRAY_SIZE(overo_bt_gpios));
 	if (ret) {
 		pr_err("%s: could not obtain BT gpios\n", __func__);
-- 
1.8.3.1

